// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: janction/videoRendering/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { VideoRenderingLogs, VideoRenderingTask, Worker } from "./types";

export const protobufPackage = "janction.videoRendering.v1";

/**
 * QueryGetGameRequest is the request type for the Query/GetGame RPC
 * method.
 */
export interface QueryGetVideoRenderingTaskRequest {
  index: string;
}

/**
 * QueryGetGameResponse is the response type for the Query/GetGame RPC
 * method.
 */
export interface QueryGetVideoRenderingTaskResponse {
  /** Game defines the game at the requested index. */
  videoRenderingTask?: VideoRenderingTask | undefined;
}

/**
 * QueryGetGameRequest is the request type for the Query/GetGame RPC
 * method.
 */
export interface QueryGetVideoRenderingLogsRequest {
  threadId: string;
}

/**
 * QueryGetGameResponse is the response type for the Query/GetGame RPC
 * method.
 */
export interface QueryGetVideoRenderingLogsResponse {
  /** Game defines the game at the requested index. */
  videoRenderingLogs?: VideoRenderingLogs | undefined;
}

export interface QueryGetPendingVideoRenderingTaskRequest {
}

export interface QueryGetPendingVideoRenderingTaskResponse {
  videoRenderingTasks: VideoRenderingTask[];
}

export interface QueryGetWorkerRequest {
  worker: string;
}

export interface QueryGetWorkerResponse {
  worker?: Worker | undefined;
}

function createBaseQueryGetVideoRenderingTaskRequest(): QueryGetVideoRenderingTaskRequest {
  return { index: "" };
}

export const QueryGetVideoRenderingTaskRequest: MessageFns<QueryGetVideoRenderingTaskRequest> = {
  encode(message: QueryGetVideoRenderingTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetVideoRenderingTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetVideoRenderingTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetVideoRenderingTaskRequest {
    return { index: isSet(object.index) ? globalThis.String(object.index) : "" };
  },

  toJSON(message: QueryGetVideoRenderingTaskRequest): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetVideoRenderingTaskRequest>, I>>(
    base?: I,
  ): QueryGetVideoRenderingTaskRequest {
    return QueryGetVideoRenderingTaskRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetVideoRenderingTaskRequest>, I>>(
    object: I,
  ): QueryGetVideoRenderingTaskRequest {
    const message = createBaseQueryGetVideoRenderingTaskRequest();
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseQueryGetVideoRenderingTaskResponse(): QueryGetVideoRenderingTaskResponse {
  return { videoRenderingTask: undefined };
}

export const QueryGetVideoRenderingTaskResponse: MessageFns<QueryGetVideoRenderingTaskResponse> = {
  encode(message: QueryGetVideoRenderingTaskResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.videoRenderingTask !== undefined) {
      VideoRenderingTask.encode(message.videoRenderingTask, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetVideoRenderingTaskResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetVideoRenderingTaskResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.videoRenderingTask = VideoRenderingTask.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetVideoRenderingTaskResponse {
    return {
      videoRenderingTask: isSet(object.videoRenderingTask)
        ? VideoRenderingTask.fromJSON(object.videoRenderingTask)
        : undefined,
    };
  },

  toJSON(message: QueryGetVideoRenderingTaskResponse): unknown {
    const obj: any = {};
    if (message.videoRenderingTask !== undefined) {
      obj.videoRenderingTask = VideoRenderingTask.toJSON(message.videoRenderingTask);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetVideoRenderingTaskResponse>, I>>(
    base?: I,
  ): QueryGetVideoRenderingTaskResponse {
    return QueryGetVideoRenderingTaskResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetVideoRenderingTaskResponse>, I>>(
    object: I,
  ): QueryGetVideoRenderingTaskResponse {
    const message = createBaseQueryGetVideoRenderingTaskResponse();
    message.videoRenderingTask = (object.videoRenderingTask !== undefined && object.videoRenderingTask !== null)
      ? VideoRenderingTask.fromPartial(object.videoRenderingTask)
      : undefined;
    return message;
  },
};

function createBaseQueryGetVideoRenderingLogsRequest(): QueryGetVideoRenderingLogsRequest {
  return { threadId: "" };
}

export const QueryGetVideoRenderingLogsRequest: MessageFns<QueryGetVideoRenderingLogsRequest> = {
  encode(message: QueryGetVideoRenderingLogsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.threadId !== "") {
      writer.uint32(10).string(message.threadId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetVideoRenderingLogsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetVideoRenderingLogsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.threadId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetVideoRenderingLogsRequest {
    return { threadId: isSet(object.threadId) ? globalThis.String(object.threadId) : "" };
  },

  toJSON(message: QueryGetVideoRenderingLogsRequest): unknown {
    const obj: any = {};
    if (message.threadId !== "") {
      obj.threadId = message.threadId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetVideoRenderingLogsRequest>, I>>(
    base?: I,
  ): QueryGetVideoRenderingLogsRequest {
    return QueryGetVideoRenderingLogsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetVideoRenderingLogsRequest>, I>>(
    object: I,
  ): QueryGetVideoRenderingLogsRequest {
    const message = createBaseQueryGetVideoRenderingLogsRequest();
    message.threadId = object.threadId ?? "";
    return message;
  },
};

function createBaseQueryGetVideoRenderingLogsResponse(): QueryGetVideoRenderingLogsResponse {
  return { videoRenderingLogs: undefined };
}

export const QueryGetVideoRenderingLogsResponse: MessageFns<QueryGetVideoRenderingLogsResponse> = {
  encode(message: QueryGetVideoRenderingLogsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.videoRenderingLogs !== undefined) {
      VideoRenderingLogs.encode(message.videoRenderingLogs, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetVideoRenderingLogsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetVideoRenderingLogsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.videoRenderingLogs = VideoRenderingLogs.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetVideoRenderingLogsResponse {
    return {
      videoRenderingLogs: isSet(object.videoRenderingLogs)
        ? VideoRenderingLogs.fromJSON(object.videoRenderingLogs)
        : undefined,
    };
  },

  toJSON(message: QueryGetVideoRenderingLogsResponse): unknown {
    const obj: any = {};
    if (message.videoRenderingLogs !== undefined) {
      obj.videoRenderingLogs = VideoRenderingLogs.toJSON(message.videoRenderingLogs);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetVideoRenderingLogsResponse>, I>>(
    base?: I,
  ): QueryGetVideoRenderingLogsResponse {
    return QueryGetVideoRenderingLogsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetVideoRenderingLogsResponse>, I>>(
    object: I,
  ): QueryGetVideoRenderingLogsResponse {
    const message = createBaseQueryGetVideoRenderingLogsResponse();
    message.videoRenderingLogs = (object.videoRenderingLogs !== undefined && object.videoRenderingLogs !== null)
      ? VideoRenderingLogs.fromPartial(object.videoRenderingLogs)
      : undefined;
    return message;
  },
};

function createBaseQueryGetPendingVideoRenderingTaskRequest(): QueryGetPendingVideoRenderingTaskRequest {
  return {};
}

export const QueryGetPendingVideoRenderingTaskRequest: MessageFns<QueryGetPendingVideoRenderingTaskRequest> = {
  encode(_: QueryGetPendingVideoRenderingTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetPendingVideoRenderingTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPendingVideoRenderingTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryGetPendingVideoRenderingTaskRequest {
    return {};
  },

  toJSON(_: QueryGetPendingVideoRenderingTaskRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetPendingVideoRenderingTaskRequest>, I>>(
    base?: I,
  ): QueryGetPendingVideoRenderingTaskRequest {
    return QueryGetPendingVideoRenderingTaskRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetPendingVideoRenderingTaskRequest>, I>>(
    _: I,
  ): QueryGetPendingVideoRenderingTaskRequest {
    const message = createBaseQueryGetPendingVideoRenderingTaskRequest();
    return message;
  },
};

function createBaseQueryGetPendingVideoRenderingTaskResponse(): QueryGetPendingVideoRenderingTaskResponse {
  return { videoRenderingTasks: [] };
}

export const QueryGetPendingVideoRenderingTaskResponse: MessageFns<QueryGetPendingVideoRenderingTaskResponse> = {
  encode(message: QueryGetPendingVideoRenderingTaskResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.videoRenderingTasks) {
      VideoRenderingTask.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetPendingVideoRenderingTaskResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPendingVideoRenderingTaskResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.videoRenderingTasks.push(VideoRenderingTask.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetPendingVideoRenderingTaskResponse {
    return {
      videoRenderingTasks: globalThis.Array.isArray(object?.videoRenderingTasks)
        ? object.videoRenderingTasks.map((e: any) => VideoRenderingTask.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryGetPendingVideoRenderingTaskResponse): unknown {
    const obj: any = {};
    if (message.videoRenderingTasks?.length) {
      obj.videoRenderingTasks = message.videoRenderingTasks.map((e) => VideoRenderingTask.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetPendingVideoRenderingTaskResponse>, I>>(
    base?: I,
  ): QueryGetPendingVideoRenderingTaskResponse {
    return QueryGetPendingVideoRenderingTaskResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetPendingVideoRenderingTaskResponse>, I>>(
    object: I,
  ): QueryGetPendingVideoRenderingTaskResponse {
    const message = createBaseQueryGetPendingVideoRenderingTaskResponse();
    message.videoRenderingTasks = object.videoRenderingTasks?.map((e) => VideoRenderingTask.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryGetWorkerRequest(): QueryGetWorkerRequest {
  return { worker: "" };
}

export const QueryGetWorkerRequest: MessageFns<QueryGetWorkerRequest> = {
  encode(message: QueryGetWorkerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.worker !== "") {
      writer.uint32(10).string(message.worker);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetWorkerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetWorkerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.worker = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetWorkerRequest {
    return { worker: isSet(object.worker) ? globalThis.String(object.worker) : "" };
  },

  toJSON(message: QueryGetWorkerRequest): unknown {
    const obj: any = {};
    if (message.worker !== "") {
      obj.worker = message.worker;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetWorkerRequest>, I>>(base?: I): QueryGetWorkerRequest {
    return QueryGetWorkerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetWorkerRequest>, I>>(object: I): QueryGetWorkerRequest {
    const message = createBaseQueryGetWorkerRequest();
    message.worker = object.worker ?? "";
    return message;
  },
};

function createBaseQueryGetWorkerResponse(): QueryGetWorkerResponse {
  return { worker: undefined };
}

export const QueryGetWorkerResponse: MessageFns<QueryGetWorkerResponse> = {
  encode(message: QueryGetWorkerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.worker !== undefined) {
      Worker.encode(message.worker, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetWorkerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetWorkerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.worker = Worker.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetWorkerResponse {
    return { worker: isSet(object.worker) ? Worker.fromJSON(object.worker) : undefined };
  },

  toJSON(message: QueryGetWorkerResponse): unknown {
    const obj: any = {};
    if (message.worker !== undefined) {
      obj.worker = Worker.toJSON(message.worker);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetWorkerResponse>, I>>(base?: I): QueryGetWorkerResponse {
    return QueryGetWorkerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetWorkerResponse>, I>>(object: I): QueryGetWorkerResponse {
    const message = createBaseQueryGetWorkerResponse();
    message.worker = (object.worker !== undefined && object.worker !== null)
      ? Worker.fromPartial(object.worker)
      : undefined;
    return message;
  },
};

/** Query defines the module Query service. */
export interface Query {
  /** GetVideoRenderingTask returns the task based on the taskId */
  GetVideoRenderingTask(request: QueryGetVideoRenderingTaskRequest): Promise<QueryGetVideoRenderingTaskResponse>;
  GetVideoRenderingLogs(request: QueryGetVideoRenderingLogsRequest): Promise<QueryGetVideoRenderingLogsResponse>;
  GetWorker(request: QueryGetWorkerRequest): Promise<QueryGetWorkerResponse>;
  GetPendingVideoRenderingTasks(
    request: QueryGetPendingVideoRenderingTaskRequest,
  ): Promise<QueryGetPendingVideoRenderingTaskResponse>;
}

export const QueryServiceName = "janction.videoRendering.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.GetVideoRenderingTask = this.GetVideoRenderingTask.bind(this);
    this.GetVideoRenderingLogs = this.GetVideoRenderingLogs.bind(this);
    this.GetWorker = this.GetWorker.bind(this);
    this.GetPendingVideoRenderingTasks = this.GetPendingVideoRenderingTasks.bind(this);
  }
  GetVideoRenderingTask(request: QueryGetVideoRenderingTaskRequest): Promise<QueryGetVideoRenderingTaskResponse> {
    const data = QueryGetVideoRenderingTaskRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetVideoRenderingTask", data);
    return promise.then((data) => QueryGetVideoRenderingTaskResponse.decode(new BinaryReader(data)));
  }

  GetVideoRenderingLogs(request: QueryGetVideoRenderingLogsRequest): Promise<QueryGetVideoRenderingLogsResponse> {
    const data = QueryGetVideoRenderingLogsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetVideoRenderingLogs", data);
    return promise.then((data) => QueryGetVideoRenderingLogsResponse.decode(new BinaryReader(data)));
  }

  GetWorker(request: QueryGetWorkerRequest): Promise<QueryGetWorkerResponse> {
    const data = QueryGetWorkerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetWorker", data);
    return promise.then((data) => QueryGetWorkerResponse.decode(new BinaryReader(data)));
  }

  GetPendingVideoRenderingTasks(
    request: QueryGetPendingVideoRenderingTaskRequest,
  ): Promise<QueryGetPendingVideoRenderingTaskResponse> {
    const data = QueryGetPendingVideoRenderingTaskRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPendingVideoRenderingTasks", data);
    return promise.then((data) => QueryGetPendingVideoRenderingTaskResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
